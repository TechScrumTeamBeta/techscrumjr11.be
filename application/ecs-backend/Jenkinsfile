
pipeline {
    agent { label 'jenkins_slave' }

    parameters {
        string(name: 'AWS_CREDENTIAL_ID', defaultValue: 'markwang access', description: 'The ID of the AWS credentials to use')

        string(name: 'GIT_BRANCH', defaultValue: 'main', description: 'The Git branch to build and deploy')
        choice(
            name: 'TFOperation',
            choices: ['apply', 'destroy'],
            description: 'apply for creating resources destroy for releasing all the resources'
        )
    }

    environment {
        AWS_ACCOUNT_ID = '650635451238'
        AWS_DEFAULT_REGION = 'ap-southeast-2'
    }

    tools {
        nodejs 'jenkinsnode'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    // Checkout the specified branch from GitHub
                    checkout([$class: 'GitSCM', branches: [[name: params.GIT_BRANCH]], userRemoteConfigs: [[url: 'https://github.com/TechScrumTeamBeta/techscrumjr11.be']]])
                }
            }
        }

        stage('Terraform Init') {
            steps {
                script {
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: params.AWS_CREDENTIAL_ID,
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh '''
                    cd application/ecs-backend
                    terraform init
                    '''
                    }
                }
            }
        }

        stage('Terraform Validation') {
            steps {
                echo 'Validating...'
                sh '''
                cd application/ecs-backend
                terraform validate
                '''
            }
        }
        // stage('Create or Select Workspace UAT') {
        //     steps {
        //         sh 'terraform workspace new uat || terraform workspace select uat'
        //     }
        // }

        stage('Terraform plan uat') {
            steps {
                echo 'Planning...'
            // sh '''
            // cd application/ecs-backend
            // terraform plan -var-file=uat.tfvars
            // '''
            }
        }

        stage('Creare or Delete Resouces in UAT') {
            steps {
                // ehco 'Creating in UAT...'
                sh '''
                #!/bin/bash
                cd application/ecs-backend
                terraform ${tfOperation} -var-file=uat.tfvars --auto-approve
                '''
            }
        }
        stage('Create or Delete Resources in Production') {
            steps {
                timeout(time: 4, unit: 'HOURS') {
                    input message: 'Create terraform resources in prod?'
                }
                withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: params.AWS_CREDENTIAL_ID,
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                    sh '''
                    cd application/ecs-backend/prod
                    terraform init
                    terraform validate

                    terraform ${tfOperation} -var-file=prod.tfvars --auto-approve
                    // echo 'Creating in PROD...
                    '''
                    }
            }
        }
    }

    post {
            always {
                cleanWs()
            }
    }
}
